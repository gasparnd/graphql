"Validation of levels types"
enum Level {
  entry
  middle
  advance
}

union GlobalSearch = Course | Student | Monitor

type Course {
  _id: ID!
  title: String!
  teacher: String
  description: String!
  topic: String @deprecated
  people: [Student]
  level: Level
}

interface Person {
  _id: ID!
  name: String!
  email: String!
}

type Student implements Person {
  _id: ID!
  name: String!
  email: String!
  avatar: String
}

type Monitor implements Person {
  _id: ID!
  name: String!
  email: String!
  phone: String
}

type Query {
  "Return all courses"
  Courses: [Course]
  "Return one course"
  Course(id: ID!): Course
  "Return all Students"
  People: [Person]
  "Return one Student"
  Person(id: ID!): Person
  "Run a global search"
  searchItems(keyword: String!): [GlobalSearch]
}

input CourseInput {
  title: String!
  teacher: String
  description: String!
  topic: String
  level: Level
}

input UpdateCourseInput {
  title: String
  teacher: String
  description: String
  topic: String
}

input  PersonInput {
  name: String!
  email: String!
  phone: String
  avatar: String
}

input  UpdatePersonInput {
  name: String
  email: String
  phone: String
  avatar: String
}

type Mutation {
  "Create course"
  createCourse(input: CourseInput!): Course
  "Edit course"
  updateCourse(_id: ID!, input: UpdateCourseInput): Course
  "Delete course"
  deleteCourse(_id: ID!): String
  "Create Person"
  createPerson(input: PersonInput!): Person
  "Edit Person"
  updatePerson(_id: ID!, input: UpdatePersonInput): Person
  "Delete Person"
  deletePerson(_id: ID!): String
  "Add person to one course"
  addPeople(courseID: ID!, personID: ID!): Course
}